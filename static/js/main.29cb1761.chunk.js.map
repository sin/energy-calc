{"version":3,"sources":["components/Slider/Slider.js","components/InfoBox/InfoBox.js","simulator/constants.js","simulator/utils.js","simulator/createPowerTable.js","simulator/createAdjustedPowerTable.js","simulator/createEnergyTable.js","simulator/createAdjustedEnergyTable.js","simulator/index.js","simulator/createPowerChartTable.js","simulator/createFuelTable.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Slider","name","value","update","className","maxValue","minValue","step","onChange","InfoBox","unit","type","REGULATING_POWER_LABELS","MAX_POWERS","nuclear","wind","solar","chp","coal","demand","CAPACITY","hydro","gas","oil","CAPACITY_FACTORS","FUEL","CO2","WASTE","POWER_COOF","powerToEnergy","power","sum","a","b","round","places","factor","Math","roundTo","addLabel","labels","index","transpose","array","Object","keys","map","column","row","POWER_TYPES","INTERVALS","length","start","Array","from","_","range","createAdjustedPowerTable","powerTable","averageDemand","demands","reduce","calculateAverageDemand","interval","production","base","min","regulating","max","regulatingDemand","isWeatherDependent","slice","calculateRegulatingPowerDemand","regulatingDemanded","createAdjustedEnergyTable","adjustedPowerTable","reserveEnergy","adjustedEnergyList","total","intervalPower","intervalEnergy","surplus","adjustedEnergyTable","energyBalance","getEnergyData","installedPowers","regulatingEnergy","label","key","toLowerCase","installedToEnergy","powers","powerType","maxPower","utilizationFactor","polystep","i","pow","adjustedPower","createPowerTable","entries","filter","installedPower","availablePowers","installed","available","balance","createPowerChartTable","powerChartTable","powerSummary","energyTable","baseEnergy","energyList","energySum","createEnergyTable","fuelTable","energy","values","createFuelTable","wasteSummary","gasPower","oilPower","gasAvailable","oilAvailable","gasTime","gasDemand","oilTime","oilDemand","powerInstalled","powerAvailable","powerRatio","formatNum","num","toFixed","replace","formatGW","formatWaste","INSTALLED_POWERS","defaultState","App","props","state","this","setState","nuclearW","nuclearWaste","waste","hasDeficit","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29cb1761.chunk.js","sourcesContent":["import React from 'react'\nimport InputRange from 'react-input-range'\n\nimport 'react-input-range/lib/css/index.css'\nimport './Slider.css'\n\nexport default function Slider({ name, value, update }) {\n  return (\n    <div className=\"Slider\">\n      <div className=\"Slider__label\">\n        <div className=\"Slider__name\">{name}</div>\n        <div className=\"Slider__value\">\n          {value}\n          <span className=\"Slider__unit\">{' MW'}</span>\n        </div>\n      </div>\n      <InputRange maxValue={25000} minValue={0} step={500} value={value} onChange={update} />\n    </div>\n  )\n}\n","import React from 'react'\nimport './InfoBox.css'\n\nexport default function InfoBox({ name, value, unit, type = '' }) {\n  return (\n    <div className=\"InfoBox\">\n      <span className=\"InfoBox__name\">{name}</span>\n      <span className={`InfoBox__value ${type}`}>{value}</span>\n      <span className=\"InfoBox__unit\">{unit}</span>\n    </div>\n  )\n}\n","export const POWER_TABLE_LABELS = ['%', 'Demand', 'Nuclear', 'CHP', 'Coal', 'Wind', 'Solar']\nexport const REGULATING_POWER_LABELS = ['Hydro', 'Oil', 'Gas']\nexport const ENERGY_TABLE_LABELS = ['Name', 'Energy']\nexport const FUEL_TABLE_LABELS = ['', 'Fuel', 'Solid Waste', 'CO2']\nexport const ADJUSTED_POWER_TABLE_LABELS = [\n  '%',\n  'Demand',\n  'Base',\n  'Renewables',\n  'Regulate Demand',\n  'Surplus'\n]\nexport const POWER_CHART_LABELS = [\n  '',\n  'Nuclear',\n  'Hydro',\n  'Wind',\n  'Solar',\n  'Gas',\n  'Oil',\n  'CHP',\n  'Coal',\n  'Deficit'\n]\n\nexport const MAX_POWERS = {\n  nuclear: 100,\n  wind: 70,\n  solar: 65,\n  chp: 75,\n  coal: 100,\n  demand: 100\n}\n\nexport const CAPACITY = {\n  nuclear: 7000,\n  hydro: 3700,\n  wind: 2630,\n  solar: 1000,\n  gas: 0,\n  oil: 0,\n  chp: 3050,\n  coal: 7884\n}\n\nexport const MAX_CAPACITY = {\n  nuclear: 7884,\n  hydro: 3700,\n  wind: 2630,\n  solar: 1000,\n  gas: 7884,\n  oil: 7884,\n  chp: 3050,\n  coal: 7884\n}\n\nexport const CAPACITY_FACTORS = {\n  nuclear: 90,\n  hydro: 82,\n  wind: 9,\n  solar: 0,\n  gas: 90,\n  oil: 90,\n  chp: 77,\n  coal: 90\n}\n\nexport const FUEL = {\n  nuclear: 0.005,\n  hydro: 0,\n  wind: 0,\n  solar: 0,\n  gas: 187,\n  oil: 331,\n  chp: 1000,\n  coal: 379\n}\n\n// grams / kWh\nexport const CO2 = {\n  nuclear: 5,\n  hydro: 9,\n  wind: 15,\n  solar: 46,\n  gas: 515,\n  oil: 993,\n  chp: 15,\n  coal: 881\n}\n\nexport const WASTE = {\n  nuclear: 0.005,\n  hydro: 0,\n  wind: 0,\n  solar: 0,\n  gas: 0,\n  oil: 0,\n  chp: 15,\n  coal: 37\n}\n\nexport const POWER_COOF = {\n  demand: [\n    5.22305012772976e-12,\n    -1.99919545823719e-9,\n    2.84634493734413e-7,\n    -1.96831546062457e-5,\n    0.000718706830438671,\n    -0.0176184293258551\n  ],\n  nuclear: [\n    2.60027483362602e-12,\n    -4.21522717629026e-10,\n    8.43915935489853e-9,\n    8.25183318068457e-7,\n    -1.04055498388049e-5,\n    -0.00395592006246061\n  ],\n  chp: [0, 0, -8.66564795646319e-9, 1.28246828222672e-6, 1.86719686851292e-5, -0.0139171520689115],\n  coal: [0, 0, 0, 0, 0, 0],\n  wind: [\n    2.32518114747708e-11,\n    -8.24592229234651e-9,\n    1.13347571282831e-6,\n    -7.65761024246728e-5,\n    0.00267572948815116,\n    -0.0521660174799689\n  ],\n  solar: [\n    3.49355320699972e-10,\n    -8.72092274335658e-8,\n    8.13600796546478e-6,\n    -0.000372701904416939,\n    0.0091188719947563,\n    -0.123030025850834\n  ]\n}\n","import { CAPACITY } from './constants'\n\n/**\n * converts MW to TWh per year\n */\nexport const powerToEnergy = power => (power * 8760) / 1e6\n\n/**\n * calculate energy from installed and capacity factor\n */\nexport const installedToEnergy = installedPowers => label => {\n  const key = label.toLowerCase()\n  return round((installedPowers[key] * CAPACITY[key]) / 1e6)\n}\n\n/**\n * sums two values\n */\nexport const sum = (a, b) => a + b\n\n/**\n * creates numbers range\n */\nexport const range = (length, step = 1, start = 0) =>\n  Array.from({ length }, (_, index) => start + index * step)\n\n/**\n * round to x decimal places\n */\nexport const roundTo = (places = 0) => value => {\n  const factor = 10 ** places\n  return Math.round(value * factor) / factor\n}\n\n/**\n * round to 1 decimal place\n */\nexport const round = roundTo(1)\n\n/**\n * add column with labels\n */\nexport const addLabel = labels => (value, index) => [labels[index], value]\n\n/**\n * transpose array\n */\nexport const transpose = array => Object.keys(array[0]).map(column => array.map(row => row[column]))\n","import { MAX_POWERS } from './constants'\nimport { POWER_COOF } from './constants'\nimport { sum, range } from './utils'\n\nconst POWER_TYPES = Object.keys(POWER_COOF)\nconst INTERVALS = range(21, 5)\n\n/**\n * Creates table with the power duration\n * power in 5 percent time intervals, 0-100 percent\n */\nexport const createPowerTable = installedPowers =>\n  INTERVALS.map(interval => {\n    // and for each power type\n    let powers = POWER_TYPES.map(powerType => {\n      const installedPower = installedPowers[powerType]\n      const maxOperationalPower = MAX_POWERS[powerType]\n      const maxPower = (installedPower * maxOperationalPower) / 100\n\n      // calculate utilization factor from powerCoof\n      // the share of maximum operational power that is turned off\n      // when demand is low, 1 === 100% on\n      const utilizationFactor =\n        1 +\n        POWER_COOF[powerType].map((polystep, i) => polystep * Math.pow(interval, 6 - i)).reduce(sum)\n\n      const adjustedPower = Math.round(maxPower * utilizationFactor)\n      // power can't be negative\n      return Math.max(0, adjustedPower)\n    })\n    // first column contains interval\n    return [interval, ...powers]\n  })\n","import { sum } from './utils'\n\nconst calculateAverageDemand = powerTable => {\n  const demands = powerTable.map(row => row[1])\n  // TODO: the average is calculated incorrectly\n  // return Math.round(demands.reduce(sum) / demands.length);\n  return Math.round(demands.reduce(sum) / (demands.length + 1))\n}\n\nconst calculateRegulatingPowerDemand = (row, averageDemand) => {\n  // [\"Nuclear\", \"CHP\", \"Coal\", \"Wind\", \"Solar\"]\n  const isWeatherDependent = [false, false, false, true, true]\n\n  // last column contains demand\n  const demand = row[1]\n\n  const production = row\n    .slice(2) // ignore first and second column (interval and demand)\n    .map((value, index) =>\n      // don't add more weather dependent power if it exceeds average demand\n      isWeatherDependent[index] ? Math.min(value, averageDemand) : value\n    )\n    .reduce(sum)\n\n  return Math.max(0, demand - production)\n}\n\n/**\n * Calculates the amount of regulating power required to meet demand\n *\n * for each time interval calculate\n * regulating = demand - chp - nuclear - coal - renewable\n *\n * if regulating > 0\n *   increase regulating power\n * while regulating < 0\n *   first decrease coal // high margin cost\n *   then decrease renewable (Solar, Wind) // zero margin cost\n *   then nuclear // is not allowed to load-follow, zero margin cost\n *   then chp // needed for heating\n *   surplus += regulating\n */\nexport const createAdjustedPowerTable = powerTable => {\n  // first we sort out how much the average demand is\n  const averageDemand = calculateAverageDemand(powerTable)\n\n  return powerTable.map(row => {\n    const [interval, demand, nuclear, chp, coal, wind, solar] = row\n\n    const production = nuclear + chp + coal + wind + solar\n\n    // base power = nuclear + chp + coal\n    // base power can't exceed demand\n    const base = Math.min(demand, nuclear + chp + coal)\n\n    // regulating power = demand - basePower\n    // regulating power can't exceed regulating power demand\n    const regulating = Math.max(0, demand - base)\n    const regulatingDemand = calculateRegulatingPowerDemand(row, averageDemand)\n\n    const regulatingDemanded = Math.min(regulating, regulatingDemand)\n\n    // renewables, weather dependent = wind + solar\n    // weather power can't exceed average demand or demand - base - regulating demanded\n    const renewables = Math.min(wind + solar, demand - base - regulatingDemanded, averageDemand)\n\n    // power surplus = production - demand\n    const surplus = Math.max(0, production - demand)\n\n    return [interval, demand, base, renewables, regulatingDemanded, surplus]\n  })\n}\n","import { REGULATING_POWER_LABELS, POWER_TABLE_LABELS } from './constants'\nimport { powerToEnergy, round, sum, addLabel } from './utils'\n\nconst labels = [...POWER_TABLE_LABELS.slice(2), ...REGULATING_POWER_LABELS]\n\n// power in MW at 50 percent\n// energy in TWh rounded to 1 decimal\nexport function createEnergyTable(powerTable, regulatingEnergy) {\n  const [, demand, ...baseEnergy] = powerTable[10].map(power => round(powerToEnergy(power)))\n\n  const energyList = [...baseEnergy, ...regulatingEnergy]\n  const energySum = energyList.reduce(sum)\n  const surplus = round(energySum - demand)\n\n  const energyTable = energyList.map(addLabel(labels))\n  return [...energyTable, [surplus > 0 ? 'Surplus' : 'Deficit', surplus]]\n}\n","import { ADJUSTED_POWER_TABLE_LABELS } from './constants';\nimport { powerToEnergy, round, addLabel, transpose } from './utils';\n\nconst labels = ADJUSTED_POWER_TABLE_LABELS.slice(2);\n\nexport const createAdjustedEnergyTable = (adjustedPowerTable, hydro, reserveEnergy) => {\n\tlet adjustedEnergyList = transpose(adjustedPowerTable)\n\t\t.slice(2)\n\t\t.map(row =>\n\t\t\trow.reduce((total, value, index, array) => {\n\t\t\t\tconst intervalPower = (value + array[index - 1]) / 2;\n\t\t\t\tconst intervalEnergy = powerToEnergy(intervalPower) / array.length;\n\t\t\t\treturn index === 1 ? intervalEnergy : total + intervalEnergy;\n\t\t\t})\n\t\t)\n\t\t.map(round);\n\n\tconst surplus = round(adjustedEnergyList[3] + (hydro - adjustedEnergyList[2] + reserveEnergy));\n\tadjustedEnergyList[3] = surplus;\n\n\treturn {\n\t\tadjustedEnergyTable: adjustedEnergyList.map(addLabel(labels)),\n\t\tenergyBalance: surplus\n\t};\n};\n","import { CAPACITY_FACTORS, REGULATING_POWER_LABELS } from './constants'\nimport { installedToEnergy, round, powerToEnergy } from './utils'\n\nimport { createPowerTable } from './createPowerTable'\nimport { createAdjustedPowerTable } from './createAdjustedPowerTable'\nimport { createEnergyTable } from './createEnergyTable'\nimport { createAdjustedEnergyTable } from './createAdjustedEnergyTable'\nimport { createPowerChartTable } from './createPowerChartTable'\nimport { createFuelTable } from './createFuelTable'\n\nexport const getEnergyData = installedPowers => {\n  const regulatingEnergy = REGULATING_POWER_LABELS.map(installedToEnergy(installedPowers))\n  const [hydro, oil, gas] = regulatingEnergy\n  const reserveEnergy = round(oil + gas)\n\n  const powerTable = createPowerTable(installedPowers)\n  const adjustedPowerTable = createAdjustedPowerTable(powerTable)\n  const [powerChartTable, ...powerSummary] = createPowerChartTable(installedPowers)\n\n  const energyTable = createEnergyTable(powerTable, regulatingEnergy)\n  const { energyBalance } = createAdjustedEnergyTable(adjustedPowerTable, hydro, reserveEnergy)\n\n  const [fuelTable, ...wasteSummary] = createFuelTable(energyTable)\n\n  const gasPower = (installedPowers.gas * CAPACITY_FACTORS.gas) / 100\n  const oilPower = (installedPowers.oil * CAPACITY_FACTORS.oil) / 100\n\n  const gasAvailable = powerToEnergy(gasPower)\n  const oilAvailable = powerToEnergy(oilPower)\n\n  const gasTime = Math.min(1, -energyBalance / gasAvailable)\n  const gasDemand = powerToEnergy(gasTime * gasPower)\n\n  const oilTime = Math.min(1, (-energyBalance - gasDemand) / oilAvailable)\n  const oilDemand = powerToEnergy((oilTime * installedPowers.oil * CAPACITY_FACTORS.oil) / 100)\n  const regulating = gasDemand + oilDemand\n\n  const { adjustedEnergyTable } = createAdjustedEnergyTable(adjustedPowerTable, hydro, regulating)\n\n  const powerInstalled = powerChartTable[0].slice(1, -1).reduce((a, b) => a + b, 0)\n  const powerAvailable = powerChartTable[1].slice(1, -1).reduce((a, b) => a + b, 0)\n  const powerRatio = powerInstalled / powerAvailable\n\n  return {\n    powerTable,\n    adjustedPowerTable,\n    energyTable,\n    adjustedEnergyTable,\n    powerChartTable,\n    powerSummary,\n    fuelTable,\n    wasteSummary,\n    powerInstalled,\n    powerAvailable,\n    powerRatio\n  }\n}\n","import { CAPACITY_FACTORS } from './constants'\nimport { round, sum, transpose } from './utils'\n\nexport const createPowerChartTable = powers => {\n  const [installedPowers, availablePowers] = transpose(\n    Object.entries(powers)\n      .filter(([powerType]) => powerType !== 'demand')\n      .map(([powerType, installedPower]) => [\n        installedPower,\n        round((CAPACITY_FACTORS[powerType] / 100) * installedPower)\n      ])\n  )\n\n  const installed = installedPowers.reduce(sum)\n  const available = availablePowers.reduce(sum)\n  const balance = Math.min(0, round(powers.demand - available))\n\n  const powerChartTable = [\n    ['Installed', ...installedPowers, '-'],\n    ['Available', ...availablePowers, balance]\n  ]\n\n  return [powerChartTable, installed, available, balance]\n}\n","import { transpose, sum } from './utils'\nimport { FUEL, WASTE, CO2 } from './constants'\n\nexport const createFuelTable = energyTable => {\n  const powerTypes = ['nuclear', 'chp', 'coal', 'wind', 'solar', 'hydro', 'oil', 'gas']\n\n  const fuelTable = powerTypes.map((powerType, index) => {\n    const energy = energyTable[index][1]\n    const values = [FUEL, WASTE, CO2].map(value => Math.round(energy * value[powerType] * 1000))\n    return [powerType, ...values]\n  })\n\n  const transposed = transpose(fuelTable)\n  const [fuel, waste, co2] = transposed.slice(1).map(value => value.reduce(sum))\n\n  return [fuelTable, fuel, waste, co2]\n}\n","import React, { Component } from 'react'\nimport Slider from '../Slider/Slider'\nimport InfoBox from '../InfoBox/InfoBox'\nimport { getEnergyData } from '../../simulator/'\nimport './App.css'\n\nconst formatNum = num => num.toFixed(1).replace('.', ',')\nconst formatGW = num => formatNum(num / 1e3)\nconst formatWaste = num => formatNum(num / 1e3)\nconst formatCO2 = num => formatNum(num / 1e6)\n\nconst INSTALLED_POWERS = {\n  nuclear: 9000,\n  hydro: 16000,\n  wind: 7500,\n  solar: 500,\n  gas: 500,\n  oil: 1000,\n  chp: 4500,\n  coal: 0,\n  demand: 26700\n}\n\nconst defaultState = {\n  installedPowers: { ...INSTALLED_POWERS },\n  ...getEnergyData(INSTALLED_POWERS)\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = defaultState\n  }\n\n  update(name, value) {\n    const installedPowers = {\n      ...this.state.installedPowers,\n      [name]: value\n    }\n\n    this.setState({ installedPowers, ...getEnergyData(installedPowers) })\n  }\n\n  render() {\n    const { installedPowers, powerInstalled, powerAvailable, powerRatio, fuelTable } = this.state\n    const { nuclear, hydro, solar, wind, chp, gas, coal, oil, demand } = installedPowers\n\n    const CO2 = formatCO2(fuelTable.reduce((a, b) => a + b[3], 0))\n    const nuclearW = fuelTable[0][2]\n    const nuclearWaste = formatWaste(nuclearW)\n    const waste = formatWaste(fuelTable.reduce((a, b) => a + b[2], 0) - nuclearW)\n    const hasDeficit = demand - powerAvailable > 0\n\n    return (\n      <div className=\"App\">\n        <div className=\"row\">\n          <div className=\"column title\">\n            <h1>\n              Kalkulator\n              <br />\n              Miksu\n              <br />\n              <span className=\"colored\">Energetycznego</span>\n            </h1>\n          </div>\n          <div className=\"column lead\">\n            <p>\n              Tutaj masz możliwość decydowania o produkcji energii elektrycznej w Polsce. Wyzwanie\n              polega na posiadaniu wystarczającej mocy, gdy popyt jest najwyszy, przy jak\n              najmniejszych konsekwencjach środowiskowych. Ty budujesz - ty decydujesz!\n            </p>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"Results column\">\n            <div className=\"row\">\n              <div className=\"column\">\n                <InfoBox name=\"Moc zainstalowana\" value={formatGW(powerInstalled)} unit={'GW'} />\n                <InfoBox\n                  name=\"Moc dostępna\"\n                  value={formatGW(powerAvailable)}\n                  unit={'GW'}\n                  type={hasDeficit ? 'warning' : ''}\n                />\n                <InfoBox name=\"Ratio\" value={formatNum(powerRatio)} />\n              </div>\n              <div className=\"column\">\n                <InfoBox name=\"Emisje CO2\" value={CO2} unit={'mln ton'} />\n                <InfoBox name=\"Odpady jądrowe\" value={nuclearWaste} unit={'tys. ton'} />\n                <InfoBox name=\"Odpady stałe\" value={waste} unit={'tys. ton'} />\n              </div>\n            </div>\n          </div>\n          <div className=\"Sliders column\">\n            <div className=\"row\">\n              <div className=\"column\">\n                <Slider\n                  name=\"Atom\"\n                  value={nuclear}\n                  update={value => this.update('nuclear', value)}\n                />\n                <Slider name=\"Hydro\" value={hydro} update={value => this.update('hydro', value)} />\n                <Slider name=\"Słońce\" value={solar} update={value => this.update('solar', value)} />\n                <Slider name=\"Wiatr\" value={wind} update={value => this.update('wind', value)} />\n              </div>\n              <div className=\"column\">\n                <Slider\n                  name=\"Kogeneracja\"\n                  value={chp}\n                  update={value => this.update('chp', value)}\n                />\n                <Slider name=\"Gaz\" value={gas} update={value => this.update('gas', value)} />\n                <Slider name=\"Węgiel\" value={coal} update={value => this.update('coal', value)} />\n                <Slider name=\"Ropa\" value={oil} update={value => this.update('oil', value)} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}