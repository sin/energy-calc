{"version":3,"sources":["simulator/constants.js","store.js","components/Slider/Slider.js","components/InfoBox/InfoBox.js","simulator/utils.js","simulator/getPowers.js","simulator/getFuel.js","simulator/getChart.js","simulator/index.js","simulator/getEnergy.js","components/App/App.js","serviceWorker.js","index.js"],"names":["REGULATING_POWER_LABELS","INSTALLED_TODAY","nuclear","hydro","wind","solar","gas","oil","chp","coal","demand","MAX_POWERS","CAPACITY_FACTORS","FUEL","CO2","WASTE","POWER_COOF","ls","window","localStorage","STORE_KEY","load","data","getItem","JSON","parse","reset","setItem","stringify","Slider","name","value","update","className","maxValue","minValue","step","onChange","InfoBox","unit","type","powerToEnergy","power","sum","a","b","round","places","factor","Math","roundTo","POWER_TYPES","Object","keys","INTERVALS","length","start","Array","from","_","index","range","getPowers","installedPowers","powerTable","map","interval","assign","powerType","maxPower","polystep","i","pow","reduce","getUtulizationFactor","max","powers","averageDemand","demands","calculateAverageDemand","row","baseload","min","regulating1","regulating2","isWeatherDependent","production","entries","calculateRegulatingPowerDemand","regulatingDemand","renewables","hydroAvailable","gasAvailable","oilAvailable","regulating","deficit","groups","getFuel","energyTable","result","energy","fuel","waste","co2","getChart","array","filter","installedPower","column","availablePowers","total","available","ratio","getData","getEnergy","fuels","formatNum","num","toFixed","replace","formatGW","formatWaste","installed","store","defaultState","isDetails","App","props","state","bind","toggleDetails","this","setState","currentState","values","nuclearW","nuclearWaste","hasDeficit","onClick","label","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3ee8f0d.chunk.js","sourcesContent":["export const POWER_TABLE_LABELS = ['%', 'Demand', 'Nuclear', 'CHP', 'Coal', 'Wind', 'Solar']\nexport const REGULATING_POWER_LABELS = ['hydro', 'gas', 'oil']\nexport const ENERGY_TABLE_LABELS = ['Name', 'Energy']\nexport const FUEL_TABLE_LABELS = ['', 'Fuel', 'Solid Waste', 'CO2']\nexport const ADJUSTED_POWER_TABLE_LABELS = [\n  '%',\n  'Demand',\n  'Base',\n  'Renewables',\n  'Regulate Demand',\n  'Surplus'\n]\n\nexport const INSTALLED_TODAY = {\n  nuclear: 0,\n  hydro: 893,\n  wind: 1374,\n  solar: 4947,\n  gas: 1956,\n  oil: 0,\n  chp: 2751,\n  coal: 30276,\n  demand: 26360\n}\n\nexport const POWER_CHART_LABELS = [\n  '',\n  'Nuclear',\n  'Hydro',\n  'Wind',\n  'Solar',\n  'Gas',\n  'Oil',\n  'CHP',\n  'Coal',\n  'Deficit'\n]\n\nexport const MAX_POWERS = {\n  nuclear: 100,\n  wind: 70,\n  solar: 65,\n  chp: 75,\n  coal: 60,\n  demand: 100,\n  hydro: 42,\n  oil: 100,\n  gas: 100\n}\n\nexport const CAPACITY = {\n  nuclear: 7000,\n  hydro: 3700,\n  wind: 2630,\n  solar: 1000,\n  gas: 0,\n  oil: 0,\n  chp: 3050,\n  coal: 7884\n}\n\nexport const MAX_CAPACITY = {\n  nuclear: 7884,\n  hydro: 3700,\n  wind: 2630,\n  solar: 1000,\n  gas: 7884,\n  oil: 7884,\n  chp: 3050,\n  coal: 7884\n}\n\nexport const CAPACITY_FACTORS = {\n  nuclear: 90,\n  hydro: 82,\n  wind: 9,\n  solar: 0,\n  gas: 90,\n  oil: 90,\n  chp: 77,\n  coal: 70\n}\n\nexport const FUEL = {\n  nuclear: 0.005,\n  hydro: 0,\n  wind: 0,\n  solar: 0,\n  gas: 187,\n  oil: 331,\n  chp: 1000,\n  coal: 379\n}\n\n// grams / kWh\nexport const CO2 = {\n  nuclear: 5,\n  hydro: 9,\n  wind: 15,\n  solar: 46,\n  gas: 515,\n  oil: 993,\n  chp: 15,\n  coal: 881\n}\n\nexport const WASTE = {\n  nuclear: 0.005,\n  hydro: 0,\n  wind: 0,\n  solar: 0,\n  gas: 0,\n  oil: 0,\n  chp: 15,\n  coal: 37\n}\n\nexport const POWER_COOF = {\n  demand: [\n    5.22305012772976e-12,\n    -1.99919545823719e-9,\n    2.84634493734413e-7,\n    -1.96831546062457e-5,\n    0.000718706830438671,\n    -0.0176184293258551\n  ],\n  nuclear: [\n    2.60027483362602e-12,\n    -4.21522717629026e-10,\n    8.43915935489853e-9,\n    8.25183318068457e-7,\n    -1.04055498388049e-5,\n    -0.00395592006246061\n  ],\n  chp: [0, 0, -8.66564795646319e-9, 1.28246828222672e-6, 1.86719686851292e-5, -0.0139171520689115],\n  coal: [\n    2.60027483362602e-12,\n    -4.21522717629026e-10,\n    8.43915935489853e-9,\n    8.25183318068457e-7,\n    -1.04055498388049e-5,\n    -0.00395592006246061\n  ],\n  wind: [\n    2.32518114747708e-11,\n    -8.24592229234651e-9,\n    1.13347571282831e-6,\n    -7.65761024246728e-5,\n    0.00267572948815116,\n    -0.0521660174799689\n  ],\n  solar: [\n    3.49355320699972e-10,\n    -8.72092274335658e-8,\n    8.13600796546478e-6,\n    -0.000372701904416939,\n    0.0091188719947563,\n    -0.123030025850834\n  ]\n}\n","import { INSTALLED_TODAY } from './simulator/constants'\n\nconst ls = window.localStorage\nconst STORE_KEY = 'energy-calc-data'\n\nexport function save(data) {\n  ls.setItem(STORE_KEY, JSON.stringify(data))\n}\n\nexport function load() {\n  const data = ls.getItem(STORE_KEY)\n  if (data) return JSON.parse(data)\n\n  reset()\n  return INSTALLED_TODAY\n}\n\nexport function reset() {\n  ls.setItem(STORE_KEY, JSON.stringify(INSTALLED_TODAY))\n  return load()\n}\n","import React from 'react'\nimport InputRange from 'react-input-range'\n\nimport 'react-input-range/lib/css/index.css'\nimport './Slider.css'\n\nexport default function Slider({ name, value, update }) {\n  return (\n    <div className=\"Slider\">\n      <div className=\"Slider__label\">\n        <div className=\"Slider__name\">{name}</div>\n        <div className=\"Slider__value\">\n          {value}\n          <span className=\"Slider__unit\">{' MW'}</span>\n        </div>\n      </div>\n      <InputRange maxValue={35000} minValue={0} step={500} value={value} onChange={update} />\n    </div>\n  )\n}\n","import React from 'react'\nimport './InfoBox.css'\n\nexport default function InfoBox({ name, value, unit, type = '' }) {\n  return (\n    <div className=\"InfoBox\">\n      <span className=\"InfoBox__name\">{name}</span>\n      <span className={`InfoBox__value ${type}`}>{value}</span>\n      <span className=\"InfoBox__unit\">{unit}</span>\n    </div>\n  )\n}\n","import { CAPACITY } from './constants'\n\n/**\n * converts MW to TWh per year\n */\nexport const powerToEnergy = power => (power * 8760) / 1e6\n\n/**\n * calculate energy from installed and capacity factor\n */\nexport const installedToEnergy = installedPowers => label => {\n  const key = label.toLowerCase()\n  return round((installedPowers[key] * CAPACITY[key]) / 1e6)\n}\n\n/**\n * sums two values\n */\nexport const sum = (a, b) => a + b\n\n/**\n * creates numbers range\n */\nexport const range = (length, step = 1, start = 0) =>\n  Array.from({ length }, (_, index) => start + index * step)\n\n/**\n * round to x decimal places\n */\nexport const roundTo = (places = 0) => value => {\n  const factor = 10 ** places\n  return Math.round(value * factor) / factor\n}\n\n/**\n * round to 1 decimal place\n */\nexport const round = roundTo(1)\n\n/**\n * add column with labels\n */\nexport const addLabel = labels => (value, index) => [labels[index], value]\n\n/**\n * transpose array\n */\nexport const transpose = array => Object.keys(array[0]).map(column => array.map(row => row[column]))\n","import { POWER_COOF, MAX_POWERS, REGULATING_POWER_LABELS } from './constants'\nimport { sum, range } from './utils'\n\nconst POWER_TYPES = Object.keys(POWER_COOF)\nconst INTERVALS = range(21, 5)\n\nconst calculateAverageDemand = powerTable => {\n  const demands = powerTable.map(({ demand }) => demand)\n  // TODO: the average is calculated incorrectly\n  // return Math.round(demands.reduce(sum) / demands.length);\n  return Math.round(demands.reduce(sum) / (demands.length + 1))\n}\n\nconst calculateRegulatingPowerDemand = ({ demand, powers }, averageDemand) => {\n  // [\"Nuclear\", \"CHP\", \"Coal\", \"Wind\", \"Solar\"]\n  const isWeatherDependent = { nuclear: false, chp: false, coal: false, wind: true, solar: true }\n\n  const production = Object.entries(powers)\n    .map(([powerType, value]) =>\n      // don't add more weather dependent power if it exceeds average demand\n      isWeatherDependent[powerType] ? Math.min(value, averageDemand) : value\n    )\n    .reduce(sum)\n\n  return Math.max(0, demand - production)\n}\n\n/**\n * Calculates utilization factor from powerCoof\n *\n * the share of maximum operational power that is turned off\n * when demand is low, 1 === 100% on\n *\n * @param {number} interval\n * @param {string} powerType\n */\nconst getUtulizationFactor = (interval, powerType) =>\n  1 + POWER_COOF[powerType].map((polystep, i) => polystep * Math.pow(interval, 6 - i)).reduce(sum)\n\n/**\n * Creates table with the power duration\n * power in 5 percent time intervals, 0-100 percent\n */\nexport const getPowers = installedPowers => {\n  const powerTable = INTERVALS.map(interval => {\n    const { demand, ...powers } = Object.assign(\n      {},\n      ...POWER_TYPES.map(powerType => {\n        const installedPower = installedPowers[powerType]\n        const maxPower = (installedPower * MAX_POWERS[powerType]) / 100\n\n        const power = Math.round(maxPower * getUtulizationFactor(interval, powerType))\n\n        return { [powerType]: Math.max(0, power) }\n      })\n    )\n\n    return { interval, demand, powers }\n  })\n\n  const averageDemand = calculateAverageDemand(powerTable)\n\n  return powerTable.map(row => {\n    const { demand, powers } = row\n    const { nuclear, chp, coal, wind, solar } = powers\n\n    const baseload = Math.min(demand, nuclear + chp + coal)\n\n    const regulating1 = demand - baseload\n    const regulating2 = calculateRegulatingPowerDemand(row, averageDemand)\n\n    const regulatingDemand = Math.min(regulating1, regulating2)\n\n    // renewables, weather dependent = wind + solar\n    // weather power can't exceed average demand or demand - baseload - regulating demanded\n    const renewables = Math.min(wind + solar, demand - baseload - regulatingDemand, averageDemand)\n\n    const [hydroAvailable, gasAvailable, oilAvailable] = REGULATING_POWER_LABELS.map(\n      powerType => (installedPowers[powerType] * MAX_POWERS[powerType]) / 100\n    )\n\n    const hydro = Math.min(regulatingDemand, hydroAvailable)\n    const gas = Math.min(regulatingDemand - hydro, gasAvailable)\n    const oil = Math.min(regulatingDemand - hydro - gas, oilAvailable)\n    const regulating = hydro + oil + gas\n\n    const nonRegulating = nuclear + chp + coal + wind + solar\n    const production = nonRegulating + regulating\n    const deficit = Math.max(0, demand - production)\n\n    row.powers = Object.assign(row.powers, { hydro, gas, oil })\n\n    return { ...row, deficit, groups: { baseload, renewables, regulating } }\n  })\n}\n","import { FUEL, WASTE, CO2 } from './constants'\n\nexport const getFuel = energyTable => {\n  return Object.entries(energyTable).reduce((result, [powerType, energy]) => {\n    const [fuel, waste, co2] = [FUEL, WASTE, CO2].map(value =>\n      Math.round(energy * value[powerType] * 1000)\n    )\n    return { ...result, [powerType]: { fuel, waste, co2 } }\n  }, {})\n}\n","import { CAPACITY_FACTORS } from './constants'\nimport { round, sum, transpose } from './utils'\n\nexport const getChart = powers => {\n  const [installedPowers, availablePowers] = transpose(\n    Object.entries(powers)\n      .filter(([powerType]) => powerType !== 'demand')\n      .map(([powerType, installedPower]) => [\n        installedPower,\n        round((CAPACITY_FACTORS[powerType] / 100) * installedPower)\n      ])\n  )\n\n  const total = installedPowers.reduce(sum)\n  const available = availablePowers.reduce(sum)\n  const ratio = round(total / available)\n\n  return { total, available, ratio }\n}\n","import { getPowers } from './getPowers'\nimport { getEnergy } from './getEnergy'\nimport { getFuel } from './getFuel'\nimport { getChart } from './getChart'\n\nexport function getData(installedPowers) {\n  const powers = getPowers(installedPowers)\n  const energy = getEnergy(powers)\n  const fuels = getFuel(energy)\n  const { total, available, ratio } = getChart(installedPowers)\n\n  return { powers, energy, fuels, total, available, ratio }\n}\n","import { powerToEnergy, round } from './utils'\n\nexport function getEnergy(powerTable) {\n  const energyTable = powerTable.map(({ powers }) => {\n    return Object.entries(powers).reduce((result, [powerType, power]) => {\n      return { ...result, [powerType]: round(powerToEnergy(power)) }\n    }, {})\n  })\n\n  return Object.keys(energyTable[0]).reduce((result, powerType) => {\n    const energy = energyTable.reduce((sum, row) => row[powerType] + sum, 0)\n    return { ...result, [powerType]: round(energy / 20) }\n  }, {})\n}\n","import React, { Component } from 'react'\nimport * as store from '../../store'\nimport Slider from '../Slider/Slider'\nimport InfoBox from '../InfoBox/InfoBox'\nimport { getData } from '../../simulator'\nimport { INSTALLED_TODAY } from '../../simulator/constants'\nimport './App.css'\n\nconst formatNum = num => num.toFixed(1).replace('.', ',')\nconst formatGW = num => formatNum(num / 1e3)\nconst formatWaste = num => formatNum(num / 1e3)\nconst formatCO2 = num => formatNum(num / 1e6)\n\nconst installed = store.load()\nconst defaultState = {\n  installed,\n  isDetails: false,\n  ...getData(installed)\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = defaultState\n    this.reset = this.reset.bind(this)\n    this.toggleDetails = this.toggleDetails.bind(this)\n  }\n\n  update(name, value) {\n    const installed = {\n      ...this.state.installed,\n      [name]: value\n    }\n\n    store.save(installed)\n    this.setState(currentState => ({ ...currentState, installed, ...getData(installed) }))\n  }\n\n  reset() {\n    const installed = store.reset()\n    this.setState(currentState => ({ ...currentState, installed, ...getData(installed) }))\n  }\n\n  toggleDetails() {\n    this.setState(currentState => ({ ...currentState, isDetails: !currentState.isDetails }))\n  }\n\n  render() {\n    const { installed, total, available, ratio, fuels } = this.state\n    const { nuclear, hydro, solar, wind, chp, gas, coal, oil, demand } = installed\n\n    const CO2 = formatCO2(Object.values(fuels).reduce((sum, { co2 }) => sum + co2, 0))\n    const nuclearW = fuels.nuclear.waste\n    const nuclearWaste = formatWaste(nuclearW)\n    const waste = formatWaste(Object.values(fuels).reduce((sum, { waste }) => sum + waste, 0))\n    const hasDeficit = demand - available > 0\n\n    return (\n      <div className=\"App\">\n        <div className=\"row\">\n          <div className=\"column title\">\n            <h1>\n              Kalkulator\n              <br />\n              Miksu\n              <br />\n              <span className=\"colored\">Energetycznego</span>\n            </h1>\n          </div>\n          <div className=\"column lead\">\n            <p>\n              Tutaj masz możliwość decydowania o produkcji energii elektrycznej w Polsce. Wyzwanie\n              polega na posiadaniu wystarczającej mocy, gdy popyt jest najwyszy, przy jak\n              najmniejszych konsekwencjach środowiskowych. Ty budujesz - ty decydujesz!\n            </p>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"Results column\">\n            <div className=\"row\">\n              <div className=\"column\">\n                <InfoBox name=\"Moc zainstalowana\" value={formatGW(total)} unit={'GW'} />\n                <InfoBox\n                  name=\"Moc dostępna\"\n                  value={formatGW(available)}\n                  unit={'GW'}\n                  type={hasDeficit ? 'warning' : ''}\n                />\n                <InfoBox name=\"Ratio\" value={formatNum(ratio)} />\n              </div>\n              <div className=\"column\">\n                <InfoBox name=\"Emisje CO2\" value={CO2} unit={'mln ton'} />\n                <InfoBox name=\"Odpady jądrowe\" value={nuclearWaste} unit={'tys. ton'} />\n                <InfoBox name=\"Odpady stałe\" value={waste} unit={'tys. ton'} />\n              </div>\n            </div>\n          </div>\n          <div className=\"Sliders column\">\n            <div className=\"row\">\n              <div className=\"column\">\n                <Slider\n                  name=\"Atom\"\n                  value={nuclear}\n                  update={value => this.update('nuclear', value)}\n                />\n                <Slider name=\"Hydro\" value={hydro} update={value => this.update('hydro', value)} />\n                <Slider name=\"Słońce\" value={solar} update={value => this.update('solar', value)} />\n                <Slider name=\"Wiatr\" value={wind} update={value => this.update('wind', value)} />\n              </div>\n              <div className=\"column\">\n                <Slider\n                  name=\"Kogeneracja\"\n                  value={chp}\n                  update={value => this.update('chp', value)}\n                />\n                <Slider name=\"Gaz\" value={gas} update={value => this.update('gas', value)} />\n                <Slider name=\"Węgiel\" value={coal} update={value => this.update('coal', value)} />\n                <Slider name=\"Ropa\" value={oil} update={value => this.update('oil', value)} />\n              </div>\n            </div>\n            <div className=\"Buttons\">\n              <button onClick={this.toggleDetails} className=\"DetailsToggle\">\n                {this.state.isDetails ? 'ukryj' : 'pokaż'}\n                {' dane szczegółowe'}\n              </button>\n              <button onClick={this.reset} className=\"ResetButton\">\n                Reset\n              </button>\n            </div>\n          </div>\n        </div>\n        {this.state.isDetails ? (\n          <div className=\"Details\">\n            <h3>{'Moc zainstalowana'}</h3>\n            <table>\n              <tr className=\"red\">\n                {['', 'Atom', 'Hydro', 'Słońce', 'Wiatr', 'CHP', 'Gaz', 'Węgiel', 'Ropa'].map(\n                  label => (\n                    <th>{label}</th>\n                  )\n                )}\n              </tr>\n              <tr>\n                <th>{'Dziś'}</th>\n                <td>{INSTALLED_TODAY.nuclear}</td>\n                <td>{INSTALLED_TODAY.hydro}</td>\n                <td>{INSTALLED_TODAY.solar}</td>\n                <td>{INSTALLED_TODAY.wind}</td>\n                <td>{INSTALLED_TODAY.chp}</td>\n                <td>{INSTALLED_TODAY.gas}</td>\n                <td>{INSTALLED_TODAY.coal}</td>\n                <td>{INSTALLED_TODAY.oil}</td>\n              </tr>\n              <tr>\n                <th>{'Twój miks'}</th>\n                <td>{nuclear}</td>\n                <td>{hydro}</td>\n                <td>{solar}</td>\n                <td>{wind}</td>\n                <td>{chp}</td>\n                <td>{gas}</td>\n                <td>{coal}</td>\n                <td>{oil}</td>\n              </tr>\n              <tr>\n                <th>{'Różnica'}</th>\n                <td>{nuclear - INSTALLED_TODAY.nuclear}</td>\n                <td>{hydro - INSTALLED_TODAY.hydro}</td>\n                <td>{solar - INSTALLED_TODAY.solar}</td>\n                <td>{wind - INSTALLED_TODAY.wind}</td>\n                <td>{chp - INSTALLED_TODAY.chp}</td>\n                <td>{gas - INSTALLED_TODAY.gas}</td>\n                <td>{coal - INSTALLED_TODAY.coal}</td>\n                <td>{oil - INSTALLED_TODAY.oil}</td>\n              </tr>\n            </table>\n          </div>\n        ) : null}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}